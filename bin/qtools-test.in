#!/usr/bin/python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from plano import *

import os
import sys

home_dir = os.path.normpath("@qtools_home@")
sys.path.insert(0, os.path.join(home_dir, "python"))

from plano import *

def start_message(args="", **kwargs):
    return start_process("qmessage --verbose {}", args, **kwargs)

def start_send(url, args="", **kwargs):
    return start_process("qsend --verbose {} {}", url, args, **kwargs)

def start_receive(url, args="", **kwargs):
    return start_process("qreceive --verbose {} {}", url, args, **kwargs)

def start_request(url, args="", **kwargs):
    return start_process("qrequest --verbose {} {}", url, args, **kwargs)

def start_respond(url, args="", **kwargs):
    return start_process("qrespond --verbose {} {}", url, args, **kwargs)

def test_send_receive_args(url, message_args="", send_args="", receive_args="--count 1"):
    output_file = make_temp_file()

    try:
        with open(output_file, "w") as out:
            message_proc = start_message(message_args, stdout=PIPE, stderr=out)
            send_proc = start_send(url, stdin=message_proc.stdout, stderr=out)
            receive_proc = start_receive(url, receive_args, stdout=PIPE, stderr=out)

            output = receive_proc.communicate()[0]

            check_process(message_proc)
            check_process(send_proc)
            check_process(receive_proc)
    except CalledProcessError:
        eprint(read(output_file), end="")
        raise

    return output[:-1]

def test_request_respond_args(url, message_args="", request_args="", respond_args="--count 1"):
    output_file = make_temp_file()

    try:
        with open(output_file, "w") as out:
            message_proc = start_message(message_args, stdout=PIPE, stderr=out)
            request_proc = start_request(url, stdin=message_proc.stdout, stdout=PIPE, stderr=out)
            respond_proc = start_respond(url, respond_args, stderr=out)

            output = request_proc.communicate()[0]

            check_process(message_proc)
            check_process(request_proc)
            check_process(respond_proc)
    except CalledProcessError:
        eprint(read(output_file), end="")
        raise

    return output[:-1]

def test_send_receive(url):
    output = test_send_receive_args(url, "--body abc123", "", "--count 1 --no-prefix")
    assert output == "abc123", output

    test_send_receive_args(url, "", "--presettled")
    test_send_receive_args(url, "--id c1")
    test_send_receive_args(url, "--count 10", "", "--count 10")
    test_send_receive_args(url, "--count 10 --rate 1000", "", "--count 10")
    test_send_receive_args(url, "--prop x y")

def test_request_respond(url):
    output = test_request_respond_args(url, "--body abc123", "", "--count 1 --reverse --upper --append ' and this'")
    assert output == "321CBA and this", output

    test_request_respond_args(url, "", "--presettled")
    test_request_respond_args(url, "--id c1")
    test_request_respond_args(url, "--count 10", "", "--count 10")
    test_request_respond_args(url, "--count 10 --rate 1000", "", "--count 10")
    test_request_respond_args(url, "--prop x y")

def main():
    set_message_threshold("warn")

    url = sys.argv[1]

    test_send_receive(url)
    test_request_respond(url)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
